service: ${self:custom.parentFile.service}-srvc-client
org: ${self:custom.parentFile.org}
app: ${self:custom.parentFile.app}

frameworkVersion: '3'
useDotenv: true
projectDir: ../..

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: ${self:custom.parentFile.provider.region}
  stage: ${self:custom.parentFile.provider.stage}
  profile: ${self:custom.parentFile.provider.profile}
  timeout: ${self:custom.parentFile.provider.timeout}
  environment: ${file(../../env-${self:provider.stage}.yml)}
  layers:
    - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-numpy:25
    - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-pandas:48
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - ${self:custom.parentFile.custom.${self:provider.stage}.secret_arn_cognito}
            - ${self:custom.parentFile.custom.${self:provider.stage}.secret_arn_mindbody}
            - ${self:custom.parentFile.custom.${self:provider.stage}.secret_arn_drchrono}
            - ${self:custom.parentFile.custom.${self:provider.stage}.secret_arn_vimeo}
            - ${self:custom.parentFile.custom.${self:provider.stage}.secret_arn_jotform}
            - ${self:custom.parentFile.custom.${self:provider.stage}.secret_arn_twilio}
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:*:*:table/${self:provider.stage}-Mworx-Client
            - arn:aws:dynamodb:*:*:table/${self:provider.stage}-Mworx-Config
            - arn:aws:dynamodb:*:*:table/${self:provider.stage}-Mworx-Self-Care
            - arn:aws:dynamodb:*:*:table/atomic_ids
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::bucket-for-content/*"

resources:
  Resources:
    MindworxApiAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: MindworxApiUser
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
           - ${self:custom.parentFile.custom.${self:provider.stage}.cognito_arn}
functions:
  list_client_services:
    handler: handlers/client_service.list_client_services
    events:
      - http:
          path: /services/{id}
          method: GET
          cors : true

  client_class_services:
    handler: handlers/client_service.client_class_services
    events:
      - http:
          path: /class_services/{id}
          method: GET
          cors : true

  add_client:
    handler: handlers/client_service.add_client
    events:
      - http:
          path: /add
          method: POST
          cors: true
  view_client:
    handler: handlers/client_service.view_client
    events:
      - http:
          path: /view/{id}
          method: GET
          cors : true
          
  update_client:
    handler: handlers/client_service.update_client
    events:
      - http:
          path: /profile
          method: POST
          cors : true
  add_patients:
    handler: handlers/add_patient.add_patients
    events:
      - http:
          path: /patients/add
          method: POST
          cors : true
          
  list_patient:
    handler: handlers/add_patient.list_patient
    events:
      - http:
          path: /plist
          method: GET
          cors : true

  list_allergies:
    handler: handlers/add_patient.list_allergies
    events:
      - http:
          path: /patient/allergies
          method: GET
          cors : true
          
  add_allergies:
    handler: handlers/add_patient.add_allergies
    events:
      - http:
          path: /allergy/add
          method: POST
          cors: true

  list_medications:
    handler: handlers/add_patient.list_medications
    events:
      - http:
          path: /patient/medications
          method: GET
          cors : true
          
  add_medications:
    handler: handlers/add_patient.add_medications
    events:
      - http:
          path: /medication/add
          method: POST
          cors : true
          
  add_problems:
    handler: handlers/add_patient.add_problems
    events:
      - http:
          path: /problem/add
          method: POST
          cors : true   

  list_problems:
    handler: handlers/add_patient.list_problems
    events:
      - http:
          path: /problem/list
          method: GET
          cors : true

  create_Onpatient:
    handler: handlers/add_patient.create_Onpatient
    events:
      - http:
          path: /patient/access
          method: POST
          cors : true

  list_templates:
    handler: handlers/add_patient.list_templates
    events:
      - http:
          path: /patient/template
          method: GET
          cors : true
  list_messages:
    handler: handlers/add_patient.list_messages
    events:
      - http:
          path: /messages
          method: GET
          cors : true
  list_doctors:
    handler: handlers/add_patient.list_doctors
    events:
      - http:
          path: /doctor/list
          method: GET
          cors : true

  create_form:
    handler: handlers/add_patient.create_form
    events:
      - http:
          path: /patient/form
          method: POST
          cors: true

  reset_password:
    handler: handlers/client_service.reset_password
    events:
      - http:
          path: /reset/password
          method: POST
          cors : true
  notification:
    handler: handlers/client_service.notification
    events:
      - http:
          path: /notification
          method: POST
          cors : true
          
  client_purchases:
    handler: handlers/client_service.client_purchases
    events:
      - http:
          path: /purchases
          method: GET
          cors : true

  get_data:
    handler: handlers/client_service.get_data
    events:
      - http:
          path: /check_in
          method: GET
          cors : true
         
  join_now:
    handler: handlers/client_service.join_now
    events:
      - http:
          path: /join_now
          method: GET
          cors : true

  client_search:
    handler: handlers/client_service.client_search
    events:
      - http:
          path: /search/{searchText}
          method: GET
          cors : true

  login:
    handler: handlers/client_service.login
    events:
      - http:
          path: /login
          method: POST
          cors : true
  list_register:
    handler: handlers/add_patient.list_register
    events:
      - http:
          path: /company
          method: GET
          cors : true

  
custom:
  parentFile: ${file(../../serverless.yml)}

  customDomain:
    domainName: ${self:custom.parentFile.custom.customDomain.domainName}
    basePath: 'client'
    stage: '${self:provider.stage}'
    createRoute53Record: true

  packageExternal:
    external:
      - '../../shared'
      - '../../infrastructure'
      - '../../providers'

  pythonRequirements:
    usePoetry: true
    useDownloadCache: true
    useStaticCache: false
    invalidateCaches: false
    slim: true

    noDeploy:
      - pytest

package:
  individually: false
  excludeDevDependencies: false
  patterns:
    - '!.vscode/**'
    - '!.pytest_cache/**'
    - '!.aws-sam/**'

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-package-external